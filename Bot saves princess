#Princess Peach is trapped in one of the four corners of a square grid. You are in the center of the grid and can move one step at a time in any of the four directions. Can you rescue the princess?

#Input format

#The first line contains an odd integer N (3 <= N < 100) denoting the size of the grid. This is followed by an NxN grid. Each cell is denoted by '-' (ascii value: 45). The bot position is denoted by 'm' and the princess position is denoted by 'p'.

#Grid is indexed using Matrix Convention

#Output format

#Print out the moves you will take to rescue the princess in one go. The moves must be separated by '\n', a newline. The valid moves are LEFT or RIGHT or UP or DOWN.

#Sample input

#3
#---
#-m-
#p--

#Sample output

#DOWN
#LEFT

def displayPathtoPrincess(n,grid):
#print all the moves here
    if grid[0][0] == 'p':
        print('UP\nLEFT\n'* ((n-1)//2))
    elif grid[n-1][0] == 'p':
        print('DOWN\nLEFT\n'* ((n-1)//2))
    elif grid[0][n-1] == 'p':
        print('UP\nRIGHT\n'* ((n-1)//2))
    elif grid[n-1][n-1] == 'p':
        print('DOWN\nRIGHT\n'* ((n-1)//2))

m = int(input())
grid = [] 
for i in range(0, m): 
    grid.append(input().strip())

displayPathtoPrincess(m,grid)
